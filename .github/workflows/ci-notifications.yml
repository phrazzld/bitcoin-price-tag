name: CI Notifications

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

# Optional external notifications - only runs if secrets are configured
jobs:
  external-notifications:
    name: External Notifications
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'cancelled'
    steps:
      - name: Download workflow data
        uses: actions/github-script@v7
        with:
          script: |
            // Get workflow run details for notification context
            const run = context.payload.workflow_run;
            
            // Set context for notification steps
            core.exportVariable('WORKFLOW_STATUS', run.conclusion);
            core.exportVariable('WORKFLOW_URL', run.html_url);
            core.exportVariable('COMMIT_SHA', run.head_sha.slice(0, 7));
            core.exportVariable('BRANCH_NAME', run.head_branch);
            core.exportVariable('ACTOR', run.actor.login);
            core.exportVariable('PR_NUMBER', run.pull_requests[0]?.number || 'N/A');

      # Slack notifications (if webhook URL configured)
      - name: Slack Notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_STATUS }}
          webhook_url: ${{ vars.SLACK_WEBHOOK_URL }}
          channel: '#ci-notifications'
          username: 'GitHub Actions'
          icon_emoji: ':github:'
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: `CI Pipeline ${process.env.WORKFLOW_STATUS.toUpperCase()}`,
              attachments: [{
                color: process.env.WORKFLOW_STATUS === 'success' ? 'good' : 'danger',
                fields: [
                  {
                    title: 'Repository',
                    value: process.env.AS_REPO,
                    short: true
                  },
                  {
                    title: 'Branch',
                    value: process.env.BRANCH_NAME,
                    short: true
                  },
                  {
                    title: 'Commit',
                    value: `<${process.env.WORKFLOW_URL}|${process.env.COMMIT_SHA}>`,
                    short: true
                  },
                  {
                    title: 'Author',
                    value: process.env.ACTOR,
                    short: true
                  }
                ]
              }]
            }

      # Discord notifications (if webhook URL configured)
      - name: Discord Notification
        if: vars.DISCORD_WEBHOOK_URL != ''
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ vars.DISCORD_WEBHOOK_URL }}
          status: ${{ env.WORKFLOW_STATUS }}
          title: "CI Pipeline ${{ env.WORKFLOW_STATUS == 'success' && '✅ Success' || '❌ Failed' }}"
          description: |
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ env.BRANCH_NAME }}
            **Commit:** [${{ env.COMMIT_SHA }}](${{ env.WORKFLOW_URL }})
            **Author:** ${{ env.ACTOR }}
            **PR:** #${{ env.PR_NUMBER }}
          color: ${{ env.WORKFLOW_STATUS == 'success' && 0x00ff00 || 0xff0000 }}

      # Teams notifications (if webhook URL configured)
      - name: Teams Notification
        if: vars.TEAMS_WEBHOOK_URL != ''
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ vars.TEAMS_WEBHOOK_URL }}
          title: "CI Pipeline ${{ env.WORKFLOW_STATUS == 'success' && '✅ Success' || '❌ Failed' }}"
          summary: "CI Pipeline completed for ${{ github.repository }}"
          sections: |
            [
              {
                "activityTitle": "Bitcoin Price Tag CI",
                "activitySubtitle": "Pipeline ${{ env.WORKFLOW_STATUS }}",
                "facts": [
                  { "name": "Repository", "value": "${{ github.repository }}" },
                  { "name": "Branch", "value": "${{ env.BRANCH_NAME }}" },
                  { "name": "Commit", "value": "${{ env.COMMIT_SHA }}" },
                  { "name": "Author", "value": "${{ env.ACTOR }}" },
                  { "name": "Status", "value": "${{ env.WORKFLOW_STATUS }}" }
                ]
              }
            ]

  # Create GitHub issue for persistent failures (optional enhancement)
  failure-tracking:
    name: Failure Tracking
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' && vars.AUTO_CREATE_ISSUES == 'true'
    steps:
      - name: Check for existing failure issue
        id: existing-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ci-failure', 'auto-created'],
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(`CI Failure`) && 
              issue.body.includes(context.payload.workflow_run.head_branch)
            );
            
            return existingIssue ? existingIssue.number : null;

      - name: Create or update failure tracking issue
        if: steps.existing-issue.outputs.result == 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            
            const issueBody = `
            ## CI Pipeline Failure
            
            **Branch:** \`${run.head_branch}\`
            **Commit:** ${run.head_sha.slice(0, 7)}
            **Author:** @${run.actor.login}
            **Workflow Run:** [View Details](${run.html_url})
            
            ### Failure Information
            - **Status:** ${run.conclusion}
            - **Triggered:** ${new Date(run.created_at).toLocaleString()}
            - **Duration:** ${Math.round((new Date(run.updated_at) - new Date(run.created_at)) / 1000)}s
            
            ### Next Steps
            1. Review the [workflow run details](${run.html_url})
            2. Check the failure analysis in the CI logs
            3. Follow troubleshooting guidance provided
            4. Fix issues and push changes
            5. Close this issue when resolved
            
            ### Troubleshooting Resources
            - [Development Philosophy](docs/DEVELOPMENT_PHILOSOPHY.md)
            - [Error Handling Guide](docs/ERROR_HANDLING.md)
            - [Local Testing Commands](README.md#development)
            
            *This issue was automatically created by CI monitoring.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI Failure: ${run.head_branch} (${run.head_sha.slice(0, 7)})`,
              body: issueBody,
              labels: ['ci-failure', 'auto-created', 'needs-investigation']
            });

  # Performance metrics collection (basic implementation)
  performance-metrics:
    name: Performance Metrics
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Collect and store performance data
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            
            // Calculate basic metrics
            const startTime = new Date(run.created_at);
            const endTime = new Date(run.updated_at);
            const duration = Math.round((endTime - startTime) / 1000);
            
            // Performance data (would be sent to monitoring service if configured)
            const metrics = {
              timestamp: endTime.toISOString(),
              repository: context.repo.full_name,
              branch: run.head_branch,
              commit: run.head_sha.slice(0, 7),
              status: run.conclusion,
              duration_seconds: duration,
              workflow_url: run.html_url
            };
            
            console.log('📊 Performance Metrics:', JSON.stringify(metrics, null, 2));
            
            // In a real implementation, these metrics would be sent to:
            // - DataDog, New Relic, Grafana Cloud, etc.
            // - Custom metrics endpoint
            // - GitHub Discussions for trend tracking
            // - Time series database
            
            core.info(`Pipeline duration: ${duration}s`);
            core.info(`Status: ${run.conclusion}`);
            core.info(`Branch: ${run.head_branch}`);