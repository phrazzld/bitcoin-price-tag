name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  # Performance monitoring
  CI_START_TIME: ${{ github.event.head_commit.timestamp }}

jobs:
  # Detect changes to optimize job execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      config: ${{ steps.changes.outputs.config }}
      deps: ${{ steps.changes.outputs.deps }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - '*.ts'
              - '*.js'
            tests:
              - 'src/**/*.test.ts'
              - 'tests/**'
              - 'test/**'
            config:
              - '.github/**'
              - '*.config.*'
              - 'tsconfig.*'
              - 'package.json'
              - 'pnpm-lock.yaml'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.config == 'true'
    steps:
      - name: Start timing
        run: echo "JOB_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.10.0'
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Enhanced node_modules caching
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      # ESLint cache for faster subsequent runs
      - name: Cache ESLint
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc.*', 'eslint.config.*') }}-${{ hashFiles('src/**/*.{ts,js}') }}
          restore-keys: |
            ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc.*', 'eslint.config.*') }}-
            ${{ runner.os }}-eslint-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint --cache --cache-location .eslintcache

      - name: Report timing
        run: |
          JOB_END_TIME=$(date +%s)
          DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "‚úÖ Lint completed in ${DURATION}s"

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.config == 'true'
    steps:
      - name: Start timing
        run: echo "JOB_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.10.0'
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Enhanced caching for dependencies and TypeScript builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: |
            .tsbuildinfo
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-tsc-${{ hashFiles('tsconfig.json', 'tsconfig.*.json') }}-${{ hashFiles('src/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-tsc-${{ hashFiles('tsconfig.json', 'tsconfig.*.json') }}-
            ${{ runner.os }}-tsc-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: pnpm run typecheck
        continue-on-error: true  # Allow pipeline to continue while type errors are being fixed

      - name: Report timing
        run: |
          JOB_END_TIME=$(date +%s)
          DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "‚úÖ TypeCheck completed in ${DURATION}s"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.config == 'true'
    strategy:
      matrix:
        node-version: [18, 20]
      # Optimize matrix execution
      fail-fast: false
      max-parallel: 2
    steps:
      - name: Start timing
        run: echo "JOB_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.10.0'
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      # Enhanced caching for test execution
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Cache Vitest cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vitest
            .vitest
          key: ${{ runner.os }}-vitest-${{ matrix.node-version }}-${{ hashFiles('vitest.config.*') }}-${{ hashFiles('src/**/*.{ts,js}', 'tests/**/*.{ts,js}') }}
          restore-keys: |
            ${{ runner.os }}-vitest-${{ matrix.node-version }}-${{ hashFiles('vitest.config.*') }}-
            ${{ runner.os }}-vitest-${{ matrix.node-version }}-

      # Cache coverage reports
      - name: Cache coverage
        uses: actions/cache@v4
        with:
          path: coverage
          key: ${{ runner.os }}-coverage-${{ matrix.node-version }}-${{ hashFiles('src/**/*.{ts,js}', 'tests/**/*.{ts,js}') }}
          restore-keys: |
            ${{ runner.os }}-coverage-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run tests with optimized configuration
      - name: Run tests with coverage and enforce thresholds
        run: |
          echo "üß™ Starting test execution..."
          TEST_START=$(date +%s)
          pnpm run test:coverage:check
          TEST_END=$(date +%s)
          TEST_DURATION=$((TEST_END - TEST_START))
          echo "‚úÖ Tests completed in ${TEST_DURATION}s"

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == 20 && always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Report timing
        run: |
          JOB_END_TIME=$(date +%s)
          DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "‚úÖ Test (Node ${{ matrix.node-version }}) completed in ${DURATION}s"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.config == 'true'
    steps:
      - name: Start timing
        run: echo "JOB_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.10.0'
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Enhanced caching for build artifacts
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Cache Webpack build
        uses: actions/cache@v4
        with:
          path: |
            .webpack-cache
            node_modules/.cache/webpack
          key: ${{ runner.os }}-webpack-${{ hashFiles('webpack.config.*') }}-${{ hashFiles('src/**/*.{ts,js}') }}
          restore-keys: |
            ${{ runner.os }}-webpack-${{ hashFiles('webpack.config.*') }}-
            ${{ runner.os }}-webpack-

      # Check for existing build artifacts
      - name: Cache build artifacts
        id: build-cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*.{ts,js}', 'webpack.config.*', 'tsconfig.*', 'package.json') }}

      - name: Install dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Build extension
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "üèóÔ∏è Starting build process..."
          BUILD_START=$(date +%s)
          pnpm run build
          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          echo "‚úÖ Build completed in ${BUILD_DURATION}s"

      - name: Cache hit notification
        if: steps.build-cache.outputs.cache-hit == 'true'
        run: echo "‚ö° Build cache hit - skipping build process"

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/manifest.json" ]; then
            echo "‚ùå Build failed: manifest.json not found in dist"
            exit 1
          fi
          echo "‚úÖ Build verification passed"
          echo "üì¶ Build artifacts:"
          ls -la dist/

      # Upload build artifacts for sharing between jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

      - name: Report timing
        run: |
          JOB_END_TIME=$(date +%s)
          DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "‚úÖ Build completed in ${DURATION}s"

  # Performance monitoring and final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [changes, lint, typecheck, test, build]
    if: always()
    steps:
      - name: Collect performance metrics
        run: |
          echo "üìä CI Performance Summary"
          echo "=========================="
          
          # Calculate total pipeline duration (approximation)
          echo "‚è±Ô∏è  Pipeline Performance:"
          echo "   ‚Ä¢ Change Detection: ~5s"
          
          # Report job execution results
          echo ""
          echo "üéØ Job Execution Status:"
          echo "   ‚Ä¢ Changes: ${{ needs.changes.result }}"
          echo "   ‚Ä¢ Lint: ${{ needs.lint.result }} ${{ needs.lint.result == 'skipped' && '(‚ö° skipped)' || '' }}"
          echo "   ‚Ä¢ TypeCheck: ${{ needs.typecheck.result }} ${{ needs.typecheck.result == 'skipped' && '(‚ö° skipped)' || '' }}"
          echo "   ‚Ä¢ Test: ${{ needs.test.result }} ${{ needs.test.result == 'skipped' && '(‚ö° skipped)' || '' }}"
          echo "   ‚Ä¢ Build: ${{ needs.build.result }} ${{ needs.build.result == 'skipped' && '(‚ö° skipped)' || '' }}"
          
          echo ""
          echo "üöÄ Optimization Features Active:"
          echo "   ‚Ä¢ ‚úÖ Smart job skipping based on file changes"
          echo "   ‚Ä¢ ‚úÖ Enhanced caching (dependencies, builds, tests)"
          echo "   ‚Ä¢ ‚úÖ Build artifact sharing"
          echo "   ‚Ä¢ ‚úÖ Performance timing collection"
          echo "   ‚Ä¢ ‚úÖ Test result caching"
          echo "   ‚Ä¢ ‚úÖ Incremental TypeScript builds"

      - name: Check all jobs success
        run: |
          # Handle conditional job execution - jobs can be skipped or successful
          function check_job_result() {
            local job_name=$1
            local job_result=$2
            
            if [[ "$job_result" == "success" || "$job_result" == "skipped" ]]; then
              return 0
            else
              return 1
            fi
          }
          
          # Check each job (skipped jobs are considered successful)
          FAILED_JOBS=()
          
          if ! check_job_result "lint" "${{ needs.lint.result }}"; then
            FAILED_JOBS+=("lint")
          fi
          
          if ! check_job_result "test" "${{ needs.test.result }}"; then
            FAILED_JOBS+=("test")
          fi
          
          if ! check_job_result "build" "${{ needs.build.result }}"; then
            FAILED_JOBS+=("build")
          fi
          
          # TypeCheck is allowed to fail for now, but we still report it
          TYPECHECK_STATUS="${{ needs.typecheck.result }}"
          
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
            echo "‚ùå CI pipeline failed"
            echo ""
            echo "Failed jobs: ${FAILED_JOBS[*]}"
            echo ""
            echo "Job Results:"
            echo "   ‚Ä¢ Lint: ${{ needs.lint.result }}"
            echo "   ‚Ä¢ TypeCheck: $TYPECHECK_STATUS (allowed to fail)"
            echo "   ‚Ä¢ Test: ${{ needs.test.result }}"
            echo "   ‚Ä¢ Build: ${{ needs.build.result }}"
            exit 1
          fi
          
          echo "‚úÖ All required CI checks passed!"
          echo ""
          echo "üéâ Pipeline completed successfully with optimizations:"
          if [[ "${{ needs.lint.result }}" == "skipped" ]]; then
            echo "   ‚ö° Lint job skipped (no relevant changes)"
          fi
          if [[ "${{ needs.typecheck.result }}" == "skipped" ]]; then
            echo "   ‚ö° TypeCheck job skipped (no relevant changes)"
          fi
          if [[ "${{ needs.test.result }}" == "skipped" ]]; then
            echo "   ‚ö° Test jobs skipped (no relevant changes)"
          fi
          if [[ "${{ needs.build.result }}" == "skipped" ]]; then
            echo "   ‚ö° Build job skipped (no relevant changes)"
          fi