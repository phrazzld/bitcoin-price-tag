#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Run asynchronously to avoid blocking the commit
{
  # Log information with timestamp
  echo "$(date): Running post-commit hooks" >> .git/post-commit.log

  # Check if glance is available
  if command -v glance >/dev/null 2>&1; then
    echo "$(date): Running glance ./" >> .git/post-commit.log
    glance ./ >> .git/post-commit.log 2>&1
  else
    echo "$(date): glance tool not found in PATH" >> .git/post-commit.log
  fi

  # Check for documentation updates needed
  DOCS_UPDATED=false

  # Check for changes in source files that would require docs updates
  if git diff-tree --no-commit-id --name-only -r HEAD | grep -q -E '\.js$|package\.json$|README\.md$'; then
    echo "$(date): Detected changes that might require documentation updates" >> .git/post-commit.log
    
    # Update component documentation if needed
    if git diff-tree --no-commit-id --name-only -r HEAD | grep -q -E 'content-module\.js|dom-scanner\.js|context-provider\.js'; then
      echo "$(date): Updating component documentation" >> .git/post-commit.log
      node ./scripts/generate-component-docs.js >> .git/post-commit.log 2>&1
      DOCS_UPDATED=true
    fi
    
    # Update API documentation if needed
    if git diff-tree --no-commit-id --name-only -r HEAD | grep -q -E 'conversion\.js|cache-manager\.js|error-handling\.js'; then
      echo "$(date): Updating API documentation" >> .git/post-commit.log
      node ./scripts/generate-api-docs.js >> .git/post-commit.log 2>&1
      DOCS_UPDATED=true
    fi
  else
    echo "$(date): No documentation-relevant changes detected" >> .git/post-commit.log
  fi

  # Print a helpful message if documentation was updated
  if [ "$DOCS_UPDATED" = true ]; then
    echo "$(date): Documentation was updated. See .git/post-commit.log for details." >> .git/post-commit.log
    echo "Documentation was updated based on your changes." >&2
  fi

  echo "$(date): Post-commit hooks completed" >> .git/post-commit.log
} &  # Run in background to make it asynchronous